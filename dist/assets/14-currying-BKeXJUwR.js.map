{"version":3,"file":"14-currying-BKeXJUwR.js","sources":["../../src/entities/lecture/assets/lectures/14-currying.md?raw"],"sourcesContent":["export default \"# Каррирование (Currying)\\n\\n## Основные концепции\\n\\n**Каррирование** — это техника преобразования функции с несколькими аргументами в последовательность функций с одним аргументом.\\n\\n### Ключевые особенности:\\n- Фиксация части аргументов\\n- Создание специализированных функций\\n- Постепенное применение аргументов\\n\\n## Реализация через `bind()`\\n\\n### Базовый пример умножения\\n\\n```javascript\\nfunction multiply(a, b) {\\n  return a * b;\\n}\\n\\n// Фиксация первого аргумента\\nconst double = multiply.bind(null, 2);\\nconsole.log(double(5)); // 10\\n\\nconst triple = multiply.bind(null, 3);\\nconsole.log(triple(5)); // 15\\n```\\n\\n## Практические примеры\\n\\n### 1. Функция приветствия\\n\\n```javascript\\nfunction greet(gender, age, name) {\\n  return `${gender === 'male' ? 'Уважаемый' : 'Уважаемая'} ${name}, ${age} лет`;\\n}\\n\\n// Фиксация аргументов\\nconst greetMale = greet.bind(null, 'male');\\nconsole.log(greetMale(30, 'Иван')); // \\\"Уважаемый Иван, 30 лет\\\"\\n\\nconst greetYoungFemale = greet.bind(null, 'female', 16);\\nconsole.log(greetYoungFemale('Анна')); // \\\"Уважаемая Анна, 16 лет\\\"\\n```\\n\\n### 2. Логирование с префиксом\\n\\n```javascript\\nfunction log(level, message) {\\n  console.log(`[${level}] ${message}`);\\n}\\n\\nconst logError = log.bind(null, 'ERROR');\\nlogError('Соединение прервано'); // \\\"[ERROR] Соединение прервано\\\"\\n```\\n\\n## Современные реализации (ES6+)\\n\\n### 1. Явное каррирование\\n\\n```javascript\\nconst curryMultiply = a => b => a * b;\\nconst double = curryMultiply(2);\\nconsole.log(double(5)); // 10\\n```\\n\\n### 2. Универсальная функция каррирования\\n\\n```javascript\\nfunction curry(fn) {\\n  return function curried(...args) {\\n    return args.length >= fn.length \\n      ? fn.apply(this, args)\\n      : (...moreArgs) => curried.apply(this, args.concat(moreArgs));\\n  };\\n}\\n\\nconst curriedSum = curry((a, b, c) => a + b + c);\\nconsole.log(curriedSum(1)(2)(3)); // 6\\n```\\n\\n## Преимущества каррирования\\n\\n1. Специализация функций - создание более конкретных версий\\n2. Переиспользование кода - избегание дублирования\\n3. Композиция функций - возможность комбинировать простые функции\\n4. Отложенное выполнение - применение аргументов по мере необходимости\\n\\n## Сравнение подходов\\n\\n| Подход | Фиксация аргументов | Гибкость | Читаемость |\\n|--------|---------------------|----------|------------|\\n| bind | Да | Низкая | Средняя |\\n| Явное каррирование | Да | Высокая | Высокая |\\n| Универсальное каррирование | Да | Максимальная | Средняя |\\n\\n> Каррирование — мощный инструмент функционального программирования, позволяющий создавать гибкие и переиспользуемые функции.\\n\""],"names":["_14Currying"],"mappings":"AAAA,MAAeA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}