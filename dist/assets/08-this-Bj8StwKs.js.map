{"version":3,"file":"08-this-Bj8StwKs.js","sources":["../../src/entities/lecture/assets/lectures/08-this.md"],"sourcesContent":["# Контекст this\n\n## Основные принципы работы **this**\n\n`this` — это ключевое слово, которое ссылается на объект, в контексте которого выполняется функция. Поведение `this` в JavaScript отличается от других языков программирования.\n\n### Особенности:\n- Значение определяется в момент вызова функции\n- Зависит от способа вызова функции\n- В strict mode без контекста будет `undefined` (вместо `window`)\n\n## Основные сценарии поведения\n\n### 1. Метод объекта\n\n```javascript\nconst user = {\n  name: 'Анна',\n  greet() {\n    console.log(`Привет, ${this.name}!`);\n  }\n};\n\nuser.greet(); // \"Привет, Анна!\"\n```\n\n### 2. Обычный вызов функции\n\n```javascript\nfunction showThis() {\n  console.log(this);\n}\n\nshowThis(); // В нестрогом режиме: window/global\n            // В strict mode: undefined\n```\n\n### 3. Обработчики событий\n\n```javascript\nconst button = document.querySelector('button');\nbutton.addEventListener('click', function() {\n  console.log(this); // HTMLButtonElement (элемент, на котором сработало событие)\n});\n```\n\n### 4. Конструктор (с оператором new)\n\n```javascript\nfunction User(name) {\n  this.name = name;\n}\n\nconst admin = new User('Иван');\nconsole.log(admin.name); // \"Иван\"\n```\n\n## Проблемы контекста\n\n### Потеря контекста\n\n```javascript\nconst user = {\n  name: 'Мария',\n  greet() {\n    console.log(`Привет, ${this.name}!`);\n  }\n};\n\nconst greetFunc = user.greet;\ngreetFunc(); // \"Привет, undefined!\" (контекст потерян)\n```\n\n## Способы управления контекстом\n\n### 1. `bind()`\n\n```javascript\nconst boundGreet = user.greet.bind(user);\nboundGreet(); // \"Привет, Мария!\"\n```\n\n### 2. `call()` и `apply()`\n\n```javascript\nfunction introduce(age, city) {\n  console.log(`${this.name}, ${age} лет, ${city}`);\n}\n\nintroduce.call(user, 25, 'Москва');\nintroduce.apply(user, [25, 'Москва']);\n```\n\n### 3. Стрелочные функции (ES6)\n\n```javascript\nconst user = {\n  name: 'Пётр',\n  greet: () => {\n    console.log(`Привет, ${this.name}!`); // Не работает как ожидается!\n  }\n};\n\nuser.greet(); // \"Привет, undefined!\" (стрелочные функции не имеют своего this)\n```\n\n## Практические рекомендации\n\n1. Для методов объектов используйте обычные функции\n2. Для callback-функций используйте стрелочные функции или `bind()`\n3. Всегда проверяйте контекст при передаче методов как callback'ов\n4. В сложных случаях явно указывайте контекст с помощью `bind/call/apply`\n\n> Контекст `this` — мощный инструмент JavaScript, но требует четкого понимания принципов его работы.\n\n"],"names":["_08This"],"mappings":"AAAA,MAAAA,EAAe"}