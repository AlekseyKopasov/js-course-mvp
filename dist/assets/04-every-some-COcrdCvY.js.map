{"version":3,"file":"04-every-some-COcrdCvY.js","sources":["../../src/entities/lecture/assets/lectures/04-every-some.md"],"sourcesContent":["# Методы every() и some()\n\n## Основные концепции\n\n### `every()`\n\n- Проверяет, **все** ли элементы массива удовлетворяют условию\n- Возвращает `true` только если **все** элементы проходят проверку\n- Пустой массив всегда возвращает `true`\n\n### `some()`\n\n- Проверяет, **хотя бы один** элемент массива удовлетворяет условию\n- Возвращает `true` если **хотя бы один** элемент проходит проверку\n- Пустой массив всегда возвращает `false`\n\n## Синтаксис\n\n```javascript\narr.every(callback(element[, index[, array]]))\narr.some(callback(element[, index[, array]]))\n```\n\n## Практические примеры\n\n### 1. Проверка числовых значений\n\n```javascript\nconst numbers = [10, 20, 30, 40];\n\n// Все числа больше 5?\nconst allAbove5 = numbers.every((n) => n > 5); // true\n\n// Хотя бы одно число больше 25?\nconst anyAbove25 = numbers.some((n) => n > 25); // true\n```\n\n### 2. Работа с объектами\n\n```javascript\nconst users = [\n  { name: 'Anna', age: 25 },\n  { name: 'Ivan', age: 30 },\n  { name: 'Maria', age: 17 },\n];\n\n// Все пользователи совершеннолетние?\nconst allAdults = users.every((u) => u.age >= 18); // false\n\n// Есть хотя бы один совершеннолетний?\nconst hasAdults = users.some((u) => u.age >= 18); // true\n```\n\n## Особенности работы\n\n| Ситуация             | every()          | some()          |\n| -------------------- | ---------------- | --------------- |\n| Пустой массив        | true             | false           |\n| Прекращение проверки | При первом false | При первом true |\n| Мутация массива      | Нет              | Нет             |\n\n## Применение в реальных проектах\n\n### 1. Валидация форм\n\n```javascript\nconst formFields = [true, true, false];\nconst isFormValid = formFields.every((field) => field); // false\n```\n\n### 2. Проверка прав доступа\n\n```javascript\nconst userPermissions = ['read', 'write'];\nconst canEdit = userPermissions.some((p) => p === 'write'); // true\n```\n\n### 3. Фильтрация данных перед обработкой\n\n```javascript\nconst dataSet = [15, 20, 'text', 30];\nconst isNumbersOnly = dataSet.every(Number.isFinite); // false\n```\n\n## Производительность\n\n- Оба метода прекращают проверку при достижении результата\n- `every()` оптимален для проверки негативных условий\n- `some()` оптимален для проверки позитивных условий\n\n> Методы `every()` и `some()` - мощные инструменты для декларативной проверки условий в массивах.\n"],"names":["_04EverySome"],"mappings":"AAAA,MAAAA,EAAe"}