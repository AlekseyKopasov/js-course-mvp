{"version":3,"file":"10-modules-WvVbt7vq.js","sources":["../../src/entities/lecture/assets/lectures/10-modules.md?raw"],"sourcesContent":["export default \"# Модули\\n\\n## Основные концепции\\n\\n**Модуль** — это паттерн проектирования, который позволяет:\\n- Инкапсулировать реализацию\\n- Избегать конфликтов имен\\n- Контролировать доступ к функциональности\\n\\n## Проблема глобального пространства имен\\n\\n```javascript\\n// Без модуля (переменные в глобальной области видимости)\\nvar message = \\\"Hello\\\";\\nfunction showMessage() {\\n  console.log(message);\\n}\\n\\n// Может перезаписать существующую переменную message\\n```\\n\\n## Решение: Immediately Invoked Function Expression (IIFE)\\n\\n### Базовый шаблон\\n\\n```javascript\\n(function() {\\n  var message = \\\"Hello\\\";\\n  \\n  function showMessage() {\\n    console.log(message);\\n  }\\n  \\n  showMessage();\\n})();\\n```\\n\\n### Варианты синтаксиса IIFE\\n\\n```javascript\\n// 1. Классический вариант\\n(function() { /* code */ })();\\n\\n// 2. С оператором\\n+function() { /* code */ }();\\n\\n// 3. С восклицательным знаком\\n!function() { /* code */ }();\\n\\n// 4. Альтернативный вариант\\n(function() { /* code */ }());\\n```\\n\\n### Экспорт функциональности\\n\\n```javascript\\nvar myModule = (function() {\\n  var privateVar = \\\"Привет\\\";\\n  \\n  function privateMethod() {\\n    console.log(privateVar);\\n  }\\n  \\n  return {\\n    publicMethod: function() {\\n      privateMethod();\\n    }\\n  };\\n})();\\n\\nmyModule.publicMethod(); // \\\"Привет\\\"\\n```\\n\\n## Современные модули (ES6+)\\n\\n### Экспорт\\n\\n```javascript\\n// module.js\\nconst privateVar = \\\"Секретные данные\\\";\\n\\nexport function publicMethod() {\\n  console.log(privateVar);\\n}\\n```\\n\\n### Импорт\\n\\n```javascript\\n// main.js\\nimport { publicMethod } from './module.js';\\n\\npublicMethod(); // \\\"Секретные данные\\\"\\n```\\n\\n## Преимущества модулей\\n\\n1. Изоляция кода — переменные не попадают в глобальную область видимости\\n2. Инкапсуляция — скрытие внутренней реализации\\n3. Переиспользование — модули можно легко подключать в разных проектах\\n4. Тестируемость — модули можно тестировать независимо\\n\\n## Практический пример\\n\\n### Создание счетчика\\n\\n```javascript\\nvar counterModule = (function() {\\n  var count = 0;\\n  \\n  return {\\n    increment: function() {\\n      return ++count;\\n    },\\n    reset: function() {\\n      count = 0;\\n    },\\n    getCount: function() {\\n      return count;\\n    }\\n  };\\n})();\\n\\nconsole.log(counterModule.increment()); // 1\\nconsole.log(counterModule.getCount()); // 1\\ncounterModule.reset();\\n```\\n\\n> Модули — это фундаментальный паттерн JavaScript, позволяющий создавать структурированный и поддерживаемый код.\\n\\n\""],"names":["_10Modules"],"mappings":"AAAA,MAAe}