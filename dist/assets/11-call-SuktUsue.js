const n="# Метод call()\n## Основные концепции\n`call()` — метод,позволяющий явно установить контекст(`this`)для вызова функции.\n### Синтаксис:\n```javascriptfunc.call(context,arg1,arg2,...)```\n## Практические примеры\n### 1. Базовое использование\n```javascriptfunction showFullName(){console.log(`${this.firstName}${this.lastName}`);}const user={firstName: 'Иван',lastName: 'Петров'};showFullName.call(user);```\n### 2. Передача аргументов\n```javascriptfunction greet(greeting,punctuation){console.log(`${greeting},${this.name}${punctuation}`);}const person={name: 'Мария'};greet.call(person,'Привет','!');```\n### 3. Заимствование методов (method borrowing)\n```javascriptfunction listArgs(){const args=Array.prototype.slice.call(arguments);console.log(args);}listArgs(1,'text',true);```\n## Особенности работы\n1. В нестрогом режиме:-`null` и `undefined` заменяются на глобальный объект-Примитивы преобразуются в объекты2. В строгом режиме:-Значения передаются как есть\n## Сравнение с другими методами\n|Метод|Вызов функции|Аргументы|Возвращает||-------|---------------|-----------|------------||call|Немедленно|Через запятую|Результат функции||apply|Немедленно|Массив|Результат функции||bind|Позже|Через запятую|Новую функцию|\n## Полезные применения\n### 1. Вызов родительского конструктора\n```javascriptfunction Product(name,price){this.name=name;this.price=price;}function Food(name,price){Product.call(this,name,price);this.category='food';}```\n### 2. Работа с псевдомассивами\n```javascriptfunction getMax(){return Math.max.apply(null,arguments);}console.log(getMax(1,3,2));```>Метод `call()` — мощный инструмент для управления контекстом выполнения функций в JavaScript.";export{n as default};
//# sourceMappingURL=11-call-SuktUsue.js.map
