const n="# Метод bind()\n## Основные концепции\n`bind()` создает новую функцию с привязанным контекстом `this` и/или фиксированными аргументами.\n### Синтаксис:\n```javascriptconst boundFunc=originalFunc.bind(context,arg1,arg2,...)```\n## Проблема потери контекста\n### Пример с `setTimeout`\n```javascriptconst user={name: 'Анна',sayHi(){console.log(`Привет,${this.name}!`);}};setTimeout(user.sayHi,1000);setTimeout(user.sayHi.bind(user),1000);```\n## Практические примеры\n### 1. Фиксация контекста\n```javascriptfunction showSum(a,b){console.log(`${this.title}: ${a+b}`);}const calculator={title: 'Сумма'};const boundShowSum=showSum.bind(calculator);boundShowSum(2,3);```\n### 2. Фиксация аргументов (каррирование)\n```javascriptfunction multiply(a,b){return a*b;}const double=multiply.bind(null,2);console.log(double(5));```\n### 3. Обработчики событий\n```javascriptconst app={data:['React','Vue','Angular'],showFirst(){console.log(this.data[0]);}};document.querySelector('button').addEventListener('click',app.showFirst.bind(app));```\n## Особенности работы\n1. Не вызывает функцию сразу — возвращает новую функцию2. Фиксирует контекст навсегда — нельзя переопределить3. Позволяет частичное применение(фиксация первых аргументов)\n## Сравнение методов управления контекстом\n|Метод|Вызов|Аргументы|Возвращает|Фиксирует контекст||-------|-------|-----------|------------|-------------------||call|Да|Список|Результат|Нет||apply|Да|Массив|Результат|Нет||bind|Нет|Список|Функцию|Да|\n## Современные альтернативы (ES6+)\n### Стрелочные функции\n```javascriptsetTimeout(()=>user.sayHi(),1000);```\n## Применение метода `bind()`\nМетод `bind()` — мощный инструмент для:-Гарантированного сохранения контекста-Создания специализированных функций-Работы с асинхронными вызовами-Реализации каррирования";export{n as default};
//# sourceMappingURL=13-bind-BrYKsf-c.js.map
