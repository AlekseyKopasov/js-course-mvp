const e="# Метод filter()\n## Основные принципы работы\nМетод `filter()` создаёт новый массив,содержащий элементы исходного массива,которые удовлетворяют условию,заданному в callback-функции.\n### Ключевые особенности:\n-Возвращает новый массив(не изменяет исходный)-Callback-функция должна возвращать `true`(включить элемент)или `false`(исключить)-Принимает те же параметры,что и `map()`: элемент,индекс,массив\n## Примеры использования\n### 1. Фильтрация чисел\n```javascriptconst numbers=[1,2,3,4,5,-1,-2,-3];const even=numbers.filter(n=>n % 2===0);const negative=numbers.filter(n=>n<0);```\n### 2. Работа с объектами\n```javascriptconst users=[{id: 1,name: 'Анна',age: 25,isActive: true},{id: 2,name: 'Иван',age: 30,isActive: false},{id: 3,name: 'Мария',age: 35,isActive: true}];const activeUsers=users.filter(user=>user.isActive);const olderThan30=users.filter(user=>user.age>30);```\n## Сравнение с другими методами\n|Метод|Возвращает|Изменяет исходный|Назначение||-------|------------|-------------------|------------||filter()|Новый массив|Нет|Фильтрация||map()|Новый массив|Нет|Трансформация||forEach()|undefined|Да(если мутировать)|Перебор|\n## Практические советы\n### ✅ Когда использовать:\n-Для выборки элементов по условию-Когда нужно сохранить исходный массив-Для цепочек методов(chaining)\n### ❌ Когда не использовать:\n-Если нужен только перебор без фильтрации-Когда требуется изменить исходный массив-Для поиска одного элемента(лучше `find()`)>Метод `filter()` — идеальный инструмент для создания новых массивов на основе условий фильтрации.";export{e as default};
//# sourceMappingURL=03-filter-BouEaMSZ.js.map
