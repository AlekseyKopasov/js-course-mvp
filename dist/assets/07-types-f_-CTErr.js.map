{"version":3,"file":"07-types-f_-CTErr.js","sources":["../../src/entities/lecture/assets/lectures/07-types.md?raw"],"sourcesContent":["export default \"# Типы функций в JavaScript\\n\\n## Основные виды функций\\n\\n### 1. Function Declaration (Объявление функции)\\n\\n```javascript\\nfunction sum(a, b) {\\n  return a + b;\\n}\\n```\\n\\n#### Особенности:\\n- Создается до выполнения кода (поднимается - hoisting)\\n- Можно вызывать до объявления\\n- Имеет собственное имя\\n\\n### 2. Function Expression (Функциональное выражение)\\n\\n```javascript\\nconst sum = function(a, b) {\\n  return a + b;\\n};\\n```\\n\\n#### Особенности:\\n- Создается в момент выполнения\\n- Нельзя вызвать до объявления\\n- Может быть анонимной\\n\\n### 3. Named Function Expression (Именованное функциональное выражение)\\n\\n```javascript\\nconst factorial = function calc(n) {\\n  return n <= 1 ? 1 : n * calc(n - 1);\\n};\\n```\\n\\n#### Особенности:\\n- Имя доступно только внутри функции\\n- Полезно для рекурсивных вызовов\\n- Удобно при отладке (имя отображается в стеке вызовов)\\n\\n## Сравнение типов функций\\n\\n| Характеристика | Declaration | Expression | Named Expression |\\n|----------------|-------------|------------|------------------|\\n| Hoisting | ✅ Да | ❌ Нет | ❌ Нет |\\n| Доступность имени | Глобально | Нет имени | Только внутри |\\n| Рекурсивные вызовы | По имени | Через переменную | По внутреннему имени |\\n| Отладка | Хорошо | Плохо | Хорошо |\\n\\n## Практические примеры\\n\\n### Разница в hoisting\\n\\n```javascript\\n// Function Declaration - работает\\nconsole.log(sum(2, 3)); // 5\\nfunction sum(a, b) { return a + b; }\\n\\n// Function Expression - ошибка\\nconsole.log(multiply(2, 3)); // ReferenceError\\nconst multiply = function(a, b) { return a * b; };\\n```\\n\\n### Рекурсия с Named Function Expression\\n\\n```javascript\\nconst power = function pow(x, n) {\\n  return n == 1 ? x : x * pow(x, n - 1);\\n};\\n\\nconsole.log(power(2, 3)); // 8\\n```\\n\\n### Присвоение функции другой переменной\\n\\n```javascript\\nfunction sayHi() { console.log('Привет'); }\\nconst greet = sayHi;\\n\\ngreet(); // 'Привет'\\nsayHi = null;\\ngreet(); // Все еще работает\\n```\\n\\n## Современные альтернативы (ES6+)\\n\\n### Стрелочные функции\\n\\n```javascript\\nconst sum = (a, b) => a + b;\\n```\\n\\n#### Отличия:\\n- Нет собственного `this`\\n- Нет `arguments`\\n- Не могут быть использованы как конструкторы\\n\\n## Выводы\\n\\n1. Для обычных случаев используйте Function Declaration\\n2. Для callback'ов и анонимных функций - Function Expression\\n3. Для сложных рекурсивных функций - Named Function Expression\\n4. В современном коде предпочтительны стрелочные функции для лаконичности\\n\\n\""],"names":["_07Types"],"mappings":"AAAA,MAAe}