{"version":3,"file":"02-map-CyMl1jPl.js","sources":["../../src/entities/lecture/assets/lectures/02-map.md"],"sourcesContent":["# Метод map()\n\n## Основные принципы работы\n\nМетод `map()` создает новый массив, применяя функцию-колбэк к каждому элементу исходного массива.\n\n### Ключевые особенности:\n\n- Не изменяет исходный массив\n- Возвращает новый массив той же длины\n- Принимает функцию-колбэк с тремя параметрами:\n  1. Текущий элемент\n  2. Индекс элемента\n  3. Сам массив\n\n## Примеры использования\n\n### 1. Преобразование числового массива\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\n// Возведение в квадрат\nconst squares = numbers.map((num) => num ** 2);\n// [1, 4, 9, 16, 25]\n\n// Упрощенная запись без return\nconst doubled = numbers.map((num) => num * 2);\n// [2, 4, 6, 8, 10]\n```\n\n### 2. Работа с объектами\n\n```javascript\nconst users = [\n  { id: 1, name: 'Анна', email: 'anna@example.com', age: 25 },\n  { id: 2, name: 'Иван', email: 'ivan@example.com', age: 30 },\n];\n\n// Извлечение нужных полей\nconst userContacts = users.map((user) => ({\n  name: user.name,\n  email: user.email,\n}));\n\n/*\n[\n  {name: 'Анна', email: 'anna@example.com'},\n  {name: 'Иван', email: 'ivan@example.com'}\n]\n*/\n```\n\n### 3. Использование индекса\n\n```javascript\nconst items = ['a', 'b', 'c'];\n\nconst indexedItems = items.map((item, index) => ({\n  value: item,\n  position: index,\n}));\n\n/*\n[\n  {value: 'a', position: 0},\n  {value: 'b', position: 1},\n  {value: 'c', position: 2}\n]\n*/\n```\n\n## Сравнение с forEach()\n\n| Характеристика        | map()        | forEach()          |\n| --------------------- | ------------ | ------------------ |\n| Возвращаемое значение | Новый массив | undefined          |\n| Изменение исходного   | Нет          | Возможно (мутация) |\n| Цепочка методов       | Да           | Нет                |\n| Производительность    | Медленнее    | Быстрее            |\n\n## Практические советы\n\n### Не используйте map если:\n\n- Нужен только перебор элементов\n- Не используете возвращаемый массив\n- Требуется максимальная производительность\n\n### Лучшие практики:\n\n- Избегайте мутаций исходных данных\n- Делайте колбэки чистыми функциями\n- Используйте деструктуризацию для сложных объектов\n\n```javascript\nconst names = users.map(({ name }) => name);\n```\n\nМетод **map()** — идеальный выбор для преобразования массивов без побочных эффектов.\n"],"names":["_02Map"],"mappings":"AAAA,MAAAA,EAAe"}