const n="# Каррирование (Currying)\n## Основные концепции\n**Каррирование**— это техника преобразования функции с несколькими аргументами в последовательность функций с одним аргументом.\n### Ключевые особенности:\n-Фиксация части аргументов-Создание специализированных функций-Постепенное применение аргументов\n## Реализация через `bind()`\n### Базовый пример умножения\n```javascriptfunction multiply(a,b){return a*b;}const double=multiply.bind(null,2);console.log(double(5));const triple=multiply.bind(null,3);console.log(triple(5));```\n## Практические примеры\n### 1. Функция приветствия\n```javascriptfunction greet(gender,age,name){return `${gender==='male' ? 'Уважаемый' : 'Уважаемая'}${name},${age}лет`;}const greetMale=greet.bind(null,'male');console.log(greetMale(30,'Иван'));const greetYoungFemale=greet.bind(null,'female',16);console.log(greetYoungFemale('Анна'));```\n### 2. Логирование с префиксом\n```javascriptfunction log(level,message){console.log(`[${level}]${message}`);}const logError=log.bind(null,'ERROR');logError('Соединение прервано');```\n## Современные реализации (ES6+)\n### 1. Явное каррирование\n```javascriptconst curryMultiply=a=>b=>a*b;const double=curryMultiply(2);console.log(double(5));```\n### 2. Универсальная функция каррирования\n```javascriptfunction curry(fn){return function curried(...args){return args.length>=fn.length? fn.apply(this,args):(...moreArgs)=>curried.apply(this,args.concat(moreArgs));};}const curriedSum=curry((a,b,c)=>a+b+c);console.log(curriedSum(1)(2)(3));```\n## Преимущества каррирования\n1. Специализация функций-создание более конкретных версий2. Переиспользование кода-избегание дублирования3. Композиция функций-возможность комбинировать простые функции4. Отложенное выполнение-применение аргументов по мере необходимости\n## Сравнение подходов\n|Подход|Фиксация аргументов|Гибкость|Читаемость||--------|---------------------|----------|------------||bind|Да|Низкая|Средняя||Явное каррирование|Да|Высокая|Высокая||Универсальное каррирование|Да|Максимальная|Средняя|>Каррирование — мощный инструмент функционального программирования,позволяющий создавать гибкие и переиспользуемые функции.";export{n as default};
//# sourceMappingURL=14-currying-B9-iVEEw.js.map
