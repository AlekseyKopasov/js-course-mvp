const e="# Методы every() и some()\n## Основные концепции\n### `every()`\n-Проверяет,**все**ли элементы массива удовлетворяют условию-Возвращает `true` только если**все**элементы проходят проверку-Пустой массив всегда возвращает `true`\n### `some()`\n-Проверяет,**хотя бы один**элемент массива удовлетворяет условию-Возвращает `true` если**хотя бы один**элемент проходит проверку-Пустой массив всегда возвращает `false`\n## Синтаксис\n```javascriptarr.every(callback(element[,index[,array]]))arr.some(callback(element[,index[,array]]))```\n## Практические примеры\n### 1. Проверка числовых значений\n```javascriptconst numbers=[10,20,30,40];const allAbove5=numbers.every((n)=>n>5);const anyAbove25=numbers.some((n)=>n>25);```\n### 2. Работа с объектами\n```javascriptconst users=[{name: 'Anna',age: 25},{name: 'Ivan',age: 30},{name: 'Maria',age: 17},];const allAdults=users.every((u)=>u.age>=18);const hasAdults=users.some((u)=>u.age>=18);```\n## Особенности работы\n|Ситуация|every()|some()||--------------------|----------------|---------------||Пустой массив|true|false||Прекращение проверки|При первом false|При первом true||Мутация массива|Нет|Нет|\n## Применение в реальных проектах\n### 1. Валидация форм\n```javascriptconst formFields=[true,true,false];const isFormValid=formFields.every((field)=>field);```\n### 2. Проверка прав доступа\n```javascriptconst userPermissions=['read','write'];const canEdit=userPermissions.some((p)=>p==='write');```\n### 3. Фильтрация данных перед обработкой\n```javascriptconst dataSet=[15,20,'text',30];const isNumbersOnly=dataSet.every(Number.isFinite);```\n## Производительность\n-Оба метода прекращают проверку при достижении результата-`every()` оптимален для проверки негативных условий-`some()` оптимален для проверки позитивных условий>Методы `every()` и `some()`-мощные инструменты для декларативной проверки условий в массивах.";export{e as default};
//# sourceMappingURL=04-every-some-COcrdCvY.js.map
