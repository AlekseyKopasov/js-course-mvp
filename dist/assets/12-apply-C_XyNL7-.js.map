{"version":3,"file":"12-apply-C_XyNL7-.js","sources":["../../src/entities/lecture/assets/lectures/12-apply.md?raw"],"sourcesContent":["export default \"# Метод apply()\\n\\n## Основные концепции\\n\\n`apply()` — метод, аналогичный `call()`, но принимающий аргументы в виде массива.\\n\\n### Синтаксис:\\n\\n```javascript\\nfunc.apply(context, [arg1, arg2, ...])\\n```\\n\\n## Практические примеры\\n\\n### 1. Базовое использование\\n\\n```javascript\\nfunction introduce(greeting, punctuation) {\\n  console.log(`${greeting}, я ${this.name}${punctuation}`);\\n}\\n\\nconst person = { name: 'Анна' };\\n\\nintroduce.apply(person, ['Привет', '!']); \\n// \\\"Привет, я Анна!\\\"\\n```\\n\\n### 2. Суммирование элементов массива\\n\\n```javascript\\nfunction sum(a, b, c) {\\n  return a + b + c;\\n}\\n\\nconst numbers = [1, 2, 3];\\nconsole.log(sum.apply(null, numbers)); // 6\\n```\\n\\n### 3. Нахождение максимального значения\\n\\n```javascript\\nconst values = [12, 5, 8, 130, 44];\\nconst max = Math.max.apply(null, values);\\nconsole.log(max); // 130\\n\\n// Современная альтернатива (ES6):\\nconsole.log(Math.max(...values)); // 130\\n```\\n\\n## Особенности работы\\n\\n### 1. Работа с динамическими аргументами\\n\\n```javascript\\nfunction dynamicSum() {\\n  return Array.prototype.reduce.call(arguments, (a, b) => a + b);\\n}\\n\\nconst args = [1, 2, 3, 4];\\nconsole.log(dynamicSum.apply(null, args)); // 10\\n```\\n\\n### 2. Использование с псевдомассивами\\n\\n```javascript\\nfunction logArgs() {\\n  console.log(Array.prototype.join.apply(arguments, [' | ']));\\n}\\n\\nlogArgs('JavaScript', 'React', 'Node'); \\n// \\\"JavaScript | React | Node\\\"\\n```\\n\\n## Сравнение с `call()`\\n\\n| Ситуация | `call()` | `apply()` |\\n|----------|----------|-----------|\\n| Передача аргументов | Через запятую | Массивом |\\n| Динамические аргументы | Неудобно | Идеально |\\n| Работа с `arguments` | Требуется преобразование | Прямая передача |\\n\\n## Современные альтернативы (ES6+)\\n\\n### 1. Spread оператор\\n\\n```javascript\\n// Вместо apply:\\nconst nums = [1, 2, 3];\\nconsole.log(Math.max(...nums)); // 3\\n```\\n\\n### 2. Деструктуризация\\n\\n```javascript\\nfunction logUser([firstName, lastName]) {\\n  console.log(`${firstName} ${lastName}`);\\n}\\n\\nconst userData = ['Иван', 'Петров'];\\nlogUser(userData); // \\\"Иван Петров\\\"\\n```\\n\\n> Метод `apply()` особенно полезен при работе с функциями, принимающими переменное число аргументов, и при необходимости передачи готового массива параметров.\\n\\n\""],"names":["_12Apply"],"mappings":"AAAA,MAAe}