const n="# Замыкания\n## Основные понятия\n**Замыкание**— это функция вместе со всеми внешними переменными,которые ей доступны. В JavaScript функции сохраняют доступ к переменным из того лексического окружения,где они были созданы.\n### Лексическое окружение (Lexical Environment)\n-Специальный внутренний объект-Содержит локальные переменные и параметры функции-Имеет ссылку на внешнее окружение(`[[Scope]]`)\n## Как работают замыкания\n1. При создании функции она получает скрытое свойство `[[Scope]]`2. Это свойство ссылается на лексическое окружение,где функция была создана3. При вызове функции создается новое лексическое окружение4. Для поиска переменных используется цепочка лексических окружений\n## Практические примеры\n### 1. Простой счетчик\n```javascriptfunction makeCounter(){let count=0;return function(){return count++;};}const counter=makeCounter();console.log(counter());console.log(counter());console.log(counter());```\n### 2. Независимые счетчики\n```javascriptconst counter1=makeCounter();const counter2=makeCounter();console.log(counter1());console.log(counter1());console.log(counter2());```\n### 3. Решение проблемы с циклами и событиями\n```javascriptfor(var i=0;i<10;i++){button.addEventListener('click',function(){console.log(i);});}for(var i=0;i<10;i++){(function(x){button.addEventListener('click',function(){console.log(x);});})(i);}```\n## Применение замыканий\n### 1. Создание приватных переменных\n```javascriptfunction createUser(name){let privateName=name;return{getName(){return privateName;},setName(newName){privateName=newName;}};}const user=createUser('Анна');console.log(user.getName());```\n### 2. Мемоизация (кеширование)\n```javascriptfunction memoize(fn){const cache={};return function(arg){return cache[arg]||(cache[arg]=fn(arg));};}```\n### 3. Каррирование функций\n```javascriptfunction multiply(a){return function(b){return a*b;};}const double=multiply(2);console.log(double(5));```\n## Важные особенности\n1. Замыкания могут приводить к утечкам памяти,если неосторожно хранить ссылки на большие объекты2. В современных версиях JavaScript(ES6+)можно использовать `let/const` в циклах вместо IIFE3. Замыкания активно используются в модульных системах и паттернах проектирования>Замыкания — мощный инструмент JavaScript,позволяющий создавать изолированные контексты и сохранять состояние между вызовами функций.";export{n as default};
//# sourceMappingURL=09-closures-CLXi-OCg.js.map
