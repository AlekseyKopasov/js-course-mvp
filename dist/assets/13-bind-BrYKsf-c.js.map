{"version":3,"file":"13-bind-BrYKsf-c.js","sources":["../../src/entities/lecture/assets/lectures/13-bind.md"],"sourcesContent":["# Метод bind()\n\n## Основные концепции\n\n`bind()` создает новую функцию с привязанным контекстом `this` и/или фиксированными аргументами.\n\n### Синтаксис:\n\n```javascript\nconst boundFunc = originalFunc.bind(context, arg1, arg2, ...)\n```\n\n## Проблема потери контекста\n\n### Пример с `setTimeout`\n\n```javascript\nconst user = {\n  name: 'Анна',\n  sayHi() {\n    console.log(`Привет, ${this.name}!`);\n  }\n};\n\n// Потеря контекста\nsetTimeout(user.sayHi, 1000); // \"Привет, undefined!\"\n\n// Решение с bind\nsetTimeout(user.sayHi.bind(user), 1000); // \"Привет, Анна!\"\n```\n\n## Практические примеры\n\n### 1. Фиксация контекста\n\n```javascript\nfunction showSum(a, b) {\n  console.log(`${this.title}: ${a + b}`);\n}\n\nconst calculator = { title: 'Сумма' };\nconst boundShowSum = showSum.bind(calculator);\n\nboundShowSum(2, 3); // \"Сумма: 5\"\n```\n\n### 2. Фиксация аргументов (каррирование)\n\n```javascript\nfunction multiply(a, b) {\n  return a * b;\n}\n\nconst double = multiply.bind(null, 2);\nconsole.log(double(5)); // 10\n```\n\n### 3. Обработчики событий\n\n```javascript\nconst app = {\n  data: ['React', 'Vue', 'Angular'],\n  showFirst() {\n    console.log(this.data[0]);\n  }\n};\n\ndocument.querySelector('button')\n  .addEventListener('click', app.showFirst.bind(app)); \n  // \"React\" при клике\n```\n\n## Особенности работы\n\n1. Не вызывает функцию сразу — возвращает новую функцию\n2. Фиксирует контекст навсегда — нельзя переопределить\n3. Позволяет частичное применение (фиксация первых аргументов)\n\n## Сравнение методов управления контекстом\n\n| Метод | Вызов | Аргументы | Возвращает | Фиксирует контекст |\n|-------|-------|-----------|------------|-------------------|\n| call | Да | Список | Результат | Нет |\n| apply | Да | Массив | Результат | Нет |\n| bind | Нет | Список | Функцию | Да |\n\n## Современные альтернативы (ES6+)\n\n### Стрелочные функции\n\n```javascript\n// Аналог bind с стрелочной функцией\nsetTimeout(() => user.sayHi(), 1000);\n```\n\n## Применение метода `bind()`\n\nМетод `bind()` — мощный инструмент для:\n- Гарантированного сохранения контекста\n- Создания специализированных функций\n- Работы с асинхронными вызовами\n- Реализации каррирования\n"],"names":["_13Bind"],"mappings":"AAAA,MAAAA,EAAe"}