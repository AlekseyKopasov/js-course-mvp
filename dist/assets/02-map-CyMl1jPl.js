const n="# Метод map()\n## Основные принципы работы\nМетод `map()` создает новый массив,применяя функцию-колбэк к каждому элементу исходного массива.\n### Ключевые особенности:\n-Не изменяет исходный массив-Возвращает новый массив той же длины-Принимает функцию-колбэк с тремя параметрами:1. Текущий элемент2. Индекс элемента3. Сам массив\n## Примеры использования\n### 1. Преобразование числового массива\n```javascriptconst numbers=[1,2,3,4,5];const squares=numbers.map((num)=>num**2);const doubled=numbers.map((num)=>num*2);```\n### 2. Работа с объектами\n```javascriptconst users=[{id: 1,name: 'Анна',email: 'anna@example.com',age: 25},{id: 2,name: 'Иван',email: 'ivan@example.com',age: 30},];const userContacts=users.map((user)=>({name: user.name,email: user.email,}));/*[{name: 'Анна',email: 'anna@example.com'},{name: 'Иван',email: 'ivan@example.com'}]*/```\n### 3. Использование индекса\n```javascriptconst items=['a','b','c'];const indexedItems=items.map((item,index)=>({value: item,position: index,}));/*[{value: 'a',position: 0},{value: 'b',position: 1},{value: 'c',position: 2}]*/```\n## Сравнение с forEach()\n|Характеристика|map()|forEach()||---------------------|------------|------------------||Возвращаемое значение|Новый массив|undefined||Изменение исходного|Нет|Возможно(мутация)||Цепочка методов|Да|Нет||Производительность|Медленнее|Быстрее|\n## Практические советы\n### Не используйте map если:\n-Нужен только перебор элементов-Не используете возвращаемый массив-Требуется максимальная производительность\n### Лучшие практики:\n-Избегайте мутаций исходных данных-Делайте колбэки чистыми функциями-Используйте деструктуризацию для сложных объектов```javascriptconst names=users.map(({name})=>name);```Метод**map()**— идеальный выбор для преобразования массивов без побочных эффектов.";export{n as default};
//# sourceMappingURL=02-map-CyMl1jPl.js.map
