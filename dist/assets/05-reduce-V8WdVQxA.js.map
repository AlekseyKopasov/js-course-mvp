{"version":3,"file":"05-reduce-V8WdVQxA.js","sources":["../../src/entities/lecture/assets/lectures/05-reduce.md"],"sourcesContent":["# Методы reduce() и reduceRight()\n\n## Основные концепции\n\nМетоды `reduce()` и `reduceRight()` используются для преобразования массива в единственное значение (свертка массива).\n\n### Ключевые различия:\n\n| Метод | Направление обхода | Аргументы callback |\n|-------|-------------------|-------------------|\n| reduce() | Слева направо | accumulator, currentValue, index, array |\n| reduceRight() | Справа налево | accumulator, currentValue, index, array |\n\n## Синтаксис\n\n```javascript\narray.reduce(callback[, initialValue])\narray.reduceRight(callback[, initialValue])\n```\n\n## Практические примеры\n\n### 1. Суммирование элементов\n\n```javascript\nconst numbers = [10, 20, 30, 40];\n\n// Без начального значения\nconst sum1 = numbers.reduce((acc, curr) => acc + curr); \n// 100 (10 + 20 + 30 + 40)\n\n// С начальным значением\nconst sum2 = numbers.reduce((acc, curr) => acc + curr, 10); \n// 110 (10 + 10 + 20 + 30 + 40)\n```\n\n### 2. Преобразование многомерного массива\n\n```javascript\nconst matrix = [[1, 2], [3, 4], [5, 6]];\n\n// С использованием concat\nconst flat1 = matrix.reduce((acc, curr) => acc.concat(curr), []);\n\n// С использованием spread оператора\nconst flat2 = matrix.reduce((acc, curr) => [...acc, ...curr], []);\n\n// Оба варианта возвращают [1, 2, 3, 4, 5, 6]\n```\n\n### 3. Агрегация данных из объектов\n\n```javascript\nconst friends = [\n  {name: 'Anna', books: ['1984', 'Метро 2033']},\n  {name: 'Ivan', books: ['Война и мир']},\n  {name: 'Maria', books: ['Гарри Поттер', 'Властелин колец']}\n];\n\nconst allBooks = friends.reduce((acc, friend) => [...acc, ...friend.books], []);\n// ['1984', 'Метро 2033', 'Война и мир', 'Гарри Поттер', 'Властелин колец']\n```\n\n## Особенности работы\n\n### 1. Начальное значение (initialValue):\n- Если не указано, первый элемент становится начальным значением\n- Рекомендуется всегда указывать для сложных операций\n\n### 2. Порядок обработки:\n- `reduce()`: первый → последний элемент\n- `reduceRight()`: последний → первый элемент\n\n### 3. Пустые массивы:\n- Вызов без initialValue на пустом массиве вызывает ошибку\n- С initialValue - возвращает initialValue\n\n## Применение в реальных проектах\n\n### 1. Статистические вычисления\n\n```javascript\nconst stats = [4.5, 3.2, 6.7, 2.1];\nconst avg = stats.reduce((sum, val) => sum + val, 0) / stats.length;\n```\n\n### 2. Композиция функций\n\n```javascript\nconst compose = (...funcs) => x => funcs.reduceRight((acc, fn) => fn(acc), x);\n```\n\n### 3. Группировка данных\n\n```javascript\nconst items = ['apple', 'banana', 'orange', 'apple'];\nconst count = items.reduce((acc, item) => {\n  acc[item] = (acc[item] || 0) + 1;\n  return acc;\n}, {});\n// {apple: 2, banana: 1, orange: 1}\n```\n\n> Методы `reduce()` и `reduceRight()` - мощные инструменты для обработки данных, которые позволяют элегантно решать сложные задачи преобразования массивов.\n\n"],"names":["_05Reduce"],"mappings":"AAAA,MAAAA,EAAe"}