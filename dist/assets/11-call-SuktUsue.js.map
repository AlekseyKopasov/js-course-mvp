{"version":3,"file":"11-call-SuktUsue.js","sources":["../../src/entities/lecture/assets/lectures/11-call.md"],"sourcesContent":["# Метод call()\n\n## Основные концепции\n\n`call()` — метод, позволяющий явно установить контекст (`this`) для вызова функции.\n\n### Синтаксис:\n\n```javascript\nfunc.call(context, arg1, arg2, ...)\n```\n\n## Практические примеры\n\n### 1. Базовое использование\n\n```javascript\nfunction showFullName() {\n  console.log(`${this.firstName} ${this.lastName}`);\n}\n\nconst user = {\n  firstName: 'Иван',\n  lastName: 'Петров'\n};\n\nshowFullName.call(user); // \"Иван Петров\"\n```\n\n### 2. Передача аргументов\n\n```javascript\nfunction greet(greeting, punctuation) {\n  console.log(`${greeting}, ${this.name}${punctuation}`);\n}\n\nconst person = { name: 'Мария' };\n\ngreet.call(person, 'Привет', '!'); // \"Привет, Мария!\"\n```\n\n### 3. Заимствование методов (method borrowing)\n\n```javascript\n// Преобразование arguments в массив\nfunction listArgs() {\n  const args = Array.prototype.slice.call(arguments);\n  console.log(args);\n}\n\nlistArgs(1, 'text', true); // [1, \"text\", true]\n```\n\n## Особенности работы\n\n1. В нестрогом режиме:\n   - `null` и `undefined` заменяются на глобальный объект\n   - Примитивы преобразуются в объекты\n2. В строгом режиме:\n   - Значения передаются как есть\n\n## Сравнение с другими методами\n\n| Метод | Вызов функции | Аргументы | Возвращает |\n|-------|---------------|-----------|------------|\n| call | Немедленно | Через запятую | Результат функции |\n| apply | Немедленно | Массив | Результат функции |\n| bind | Позже | Через запятую | Новую функцию |\n\n## Полезные применения\n\n### 1. Вызов родительского конструктора\n\n```javascript\nfunction Product(name, price) {\n  this.name = name;\n  this.price = price;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\n```\n\n### 2. Работа с псевдомассивами\n\n```javascript\nfunction getMax() {\n  return Math.max.apply(null, arguments);\n}\n\nconsole.log(getMax(1, 3, 2)); // 3\n```\n\n> Метод `call()` — мощный инструмент для управления контекстом выполнения функций в JavaScript.\n\n"],"names":["_11Call"],"mappings":"AAAA,MAAAA,EAAe"}